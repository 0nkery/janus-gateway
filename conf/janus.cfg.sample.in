; General configuration: folders where the configuration and the plugins
; can be found, default interface to use, debug/logging level and, if
; needed, shared apisecret between application(s) and Janus. By default,
; no secret is required for the Janus API, but it is for the Admin API.
[general]
configs_folder = @confdir@		; Configuration files folder
plugins_folder = @plugindir@	; Plugins folder
;interface = 1.2.3.4			; Interface to use (will be used in SDP)
debug_level = 4					; Debug/logging level, valid values are 0-7
;debug_timestamps = yes			; Whether to show a timestamp for each log line
;debug_colors = no				; Whether colors should be disabled in the log
;api_secret = janusrocks		; String that all Janus requests must contain
;								  to be accepted/authorized by the Janus core.
;								  Useful if you're wrapping all Janus API requests
;								  in your servers (that is, not in the browser,
;								  where you do the things your way) and you
;								  don't want other application to mess with
;								  this Janus instance.


; Certificate and key to use for DTLS.
[certificates]
cert_pem = @certdir@/mycert.pem
cert_key = @certdir@/mycert.key


; Media-related stuff: right now, you can only configure whether you want
; to enable IPv6 support (still WIP, so handle with care), the maximum size
; of the NACK queue for retransmissions per handle the range of ports to
; use for RTP and RTCP (by default, no range is envisaged) and the
; starting MTU for DTLS (1472 by default, it adapts automatically).
; If you change any setting in the lines below, remember to uncomment the
; [media] category as well, which is commented by default!
;[media]
;ipv6 = true
;max_nack_queue = 300
;rtp_port_range = 20000-40000
;dtls_mtu = 1200


; NAT-related stuff: specifically, you can either manually specify the 
; public IP of the machine (i.e., what would be used in SDP) or
; configure the STUN/TURN servers to use to gather candidates if the gateway
; is behind a NAT, and srflx/relay candidates are needed. Please beware that
; just blindly setting the public IP may break connectivity, especially
; if Janus is installed behind a NAT: when unsure, just enable a STUN
; server instead, which will take care of this automatically. In case
; this is needed (it shouldn't), you can also configure Janus to use a
; TURN server; please notice that this does NOT refer to TURN usage in
; browsers, but in the gathering of relay candidates by Janus itself,
; e.g., if you want to limit the ports used by a Janus instance on a
; private machine. Furthermore, you can choose whether Janus should be
; configured to work in ICE-Lite mode (by default it doesn't). Finally,
; you can also enable ICE-TCP support (beware that it currently *only*
; works if you enable ICE Lite as well) and enable or disable the
; internal libnice debugging, if needed. 
[nat]
;public_ip = 1.2.3.4
;stun_server = stun.voip.eutelia.it
;stun_port = 3478
nice_debug = false
;ice_lite = true
;ice_tcp = true

; You can configure a TURN server in two different ways: specifying a
; statically configured TURN server, and thus provide the address of the
; TURN server, the transport (udp/tcp/tls) to use, and a set of valid
; credentials to authenticate...
;turn_server = myturnserver.com
;turn_port = 3478
;turn_type = udp
;turn_user = myuser
;turn_pwd = mypassword

; ... or you can make use of the TURN REST API to get info on one or more
; TURN services dynamically. This makes use of the proposed standard of
; such an API (https://tools.ietf.org/html/draft-uberti-behave-turn-rest-00)
; which is currently available in both rfc5766-turn-server and coturn.
; You enable this by specifying the address of your TURN REST API backend
; and, if required, the API key Janus must provide.
;turn_rest_api = http://yourbackend.com/path/to/api
;turn_rest_api_key = anyapikeyyoumayhaveset

; You can also choose which interfaces or IP addresses should be excluded
; and ignored by the gateway for the purpose of ICE candidates gathering.
; To do so, use the 'ice_ignore_list' setting and pass it a comma-separated
; list of interfaces or IP addresses to ignore. This is especially useful
; if the server hosting the gateway has several interfaces you already
; know will not be used or will simply always slow down ICE (e.g., virtual
; interfaces created by VMware). Partial strings are supported, which
; means that any of the following examples are valid:
;     ice_ignore_list = vmnet8,192.168.0.1,10.0.0.1
;     ice_ignore_list = vmnet,192.168.
; By default, we ignore all interfaces whose name starts with 'vmnet':
ice_ignore_list = vmnet

; Finally, you can choose which of the available transports or plugins
; should be enabled or not. Use the 'disable' directive to prevent Janus
; from loading one or more transports or plugins: use a comma separated
; list of plugin file names to identify the plugins to disable. By default
; all available transports and plugins are enabled and loaded at startup. 
[transports]
; disable = libjanus_rabbitmq.so,libjanus_websockets.so
[plugins]
; disable = libjanus_voicemail.so,libjanus_recordplay.so
